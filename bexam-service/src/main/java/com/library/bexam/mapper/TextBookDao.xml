<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.bexam.dao.TextBookDao">
    <resultMap id="BaseResultMap" type="com.library.bexam.entity.TextBookEntity">
        <id column="book_id" jdbcType="INTEGER" property="textBookId"/>
        <result column="book_name" jdbcType="VARCHAR" property="textBookName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <association property="versionEntity" javaType="com.library.bexam.form.VersionForm">
            <id column="version_id" jdbcType="INTEGER" property="versionId"/>
            <result column="version_name" jdbcType="VARCHAR" property="versionName"/>
        </association>
        <collection property="nodeBookEntityList" ofType="com.library.bexam.form.NodeBookForm">
            <id column="node_id" jdbcType="INTEGER" property="nodeId"/>
            <result column="node_name" jdbcType="VARCHAR" property="nodeName"/>
        </collection>
    </resultMap>
    <sql id="Base_Column_List">
        distinct book.book_id,book.book_name, DATE_FORMAT(book.create_time,'%Y-%m-%d %H:%i:%s') as create_time,
        version.version_id,version.version_name,node.node_id,node.node_name
    </sql>
    <insert id="addTextBook" parameterType="com.library.bexam.entity.TextBookEntity" useGeneratedKeys="true" keyProperty="textBookId">
        insert into exam_textbook
        <trim prefix="(" suffixOverrides="," suffix=")">
            <if test="textBookId!=0">
                book_id,
            </if>
            <if test="textBookName!=null and textBookName!=''">
                book_name,
            </if>
            <if test="createTime!=null and createTime!=''">
                create_time,
            </if>
        </trim>
        <trim prefix="(" suffixOverrides="," suffix=")">
            <if test="textBookId!=0">
                #{versionId},
            </if>
            <if test="textBookName!=null and textBookName!=''">
                #{textBookName},
            </if>
            <if test="createTime!=null and createTime!=''">
                #{createTime},
            </if>
        </trim>
    </insert>
    <insert id="addTextBookList"  parameterType="com.library.bexam.entity.TextBookEntity" useGeneratedKeys="true" keyProperty="textBookId">
        insert into exam_textbook(book_id,book_name,create_time)
        values
        <if test="list!=null and list.size()>0">
            <foreach item="item" collection="list" separator=",">
                (#{item.textBookId},#{item.textBookName},#{item.createTime})
            </foreach>
        </if>
    </insert>
    <insert id="addVersion2TextBook">
        insert into exam_version2textbook(version_id,book_id)
        values
        <if test="list!=null and list.size()>0">
            <foreach item="item" collection="list" separator=",">
                (#{item.versionId},#{item.textBookId})
            </foreach>
        </if>
    </insert>
    <select id="searchTextBookList" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from exam_textbook book
        left join exam_version2textbook ver2book on ver2book.book_id=book.book_id
        left join exam_version version on version.version_id=ver2book.version_id
        left join exam_textbook2nodebook book2node on book2node.book_id=book.book_id
        left join exam_nodebook node on node.node_id=book2node.node_id
        left join exam_subject2version sub2ver on sub2ver.version_id=version.version_id
        left join exam_subject sub on sub.subject_id=sub2ver.subject_id
        left join exam_period2subject per2sub on per2sub.subject_id=sub.subject_id
        left join exam_period p on p.period_id=per2sub.period_id
        where p.period_id in
        <foreach collection="periodIdArr" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by book.book_id asc
    </select>
    <select id="searchTextBookListByVersionId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select distinct book.book_id,book.book_name, DATE_FORMAT(book.create_time,'%Y-%m-%d %H:%i:%s') as create_time,
        version.version_id,version.version_name
        from exam_textbook book
        left join exam_version2textbook v2b on v2b.book_id=book.book_id
        left join exam_version version on version.version_id=v2b.version_id
        where version.version_id=#{versionId}
        order by book.book_id asc
    </select>
</mapper>